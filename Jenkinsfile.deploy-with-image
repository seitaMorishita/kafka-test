#!/bin/groovy

def NAMESPACE = "${env.JOB_NAME.split('/')[3]}"
def IMAGE_NAME = 'nginx' // CHANGEME
def DOCKER_REGISTRY = "${dockerRegistry(env.PROD1_CLUSTER_ID)}"
def DOCKER_CRED = "${env.PROD1_CLUSTER_ID}_${NAMESPACE}_docker-cred"

pipeline {
	agent {
		label 'slave'
	}
	options {
		ansiColor('xterm')
		buildDiscarder(logRotator(numToKeepStr: '20'))
		timeout(time: 30, unit: 'MINUTES')
		timestamps()
	}
	parameters {
		imageTag(name: 'DOCKER_IMAGE', description: 'Docker image',
			image: "${NAMESPACE}/${IMAGE_NAME}", filter: '.*',
			registry: "https://${DOCKER_REGISTRY}", credentialId: DOCKER_CRED, tagOrder: 'NATURAL')
		booleanParam(defaultValue: false, description: 'Update pipeline parameters without building/deploying', name: 'UPDATE_PIPELINE_ONLY')
	}
	environment {
		MANIFEST_FILE = 'resource.yaml'
		K8S_CLUSTER_ID = "${env.PROD1_CLUSTER_ID}"
		K8S_NAMESPACE = "${NAMESPACE}"
	}
	stages {
		stage('Update the pipeline and abort') {
			when {
				expression { env.UPDATE_PIPELINE_ONLY != 'false' }
			}
			steps {
				script {
					currentBuild.result = 'ABORTED'
					error('Pipeline successfully updated! Please rerun the pipeline!')
				}
			}
		}

		// If you want to use USER toekn instead of ServiceAccount token, please remove following comment.
		// stage('Retrieve IAM token from user session') {
		// 	steps {
		// 		script {
		// 			env.K8S_TOKEN = cpd.getIAMToken()
		// 		}
		// 	}
		// }

		stage ('Build resource yaml') {
			steps {
				script {
					// Update image url with built image url in above stage
					// Build Kubernetes resource declaration for the env that specified by the parameters
					dir("overlays/release") {
						sh label: 'build resource.yaml with kustomize', script: """
							${KUSTOMIZE_HOME}/kustomize edit set image ${IMAGE_NAME}="${DOCKER_REGISTRY}/${env.DOCKER_IMAGE}"
							${KUSTOMIZE_HOME}/kustomize build --output ../../${MANIFEST_FILE}
						"""
					}

					// cpd.getNameFromManifest only support single resource
					// If you want to check rollout status of multiple deployments, please set DEPLOY_NAME statically and call kubectl rollout status twice.
					env.DEPLOY_NAME = cpd.getNameFromManifest(file: env.MANIFEST_FILE, kind: 'Deployment')
				}
			}
			post {
				success {
					archiveArtifacts env.MANIFEST_FILE
				}
			}
		}

		stage ('Apply manifests') {
			steps {
				script {
					def APPLY_STATUS = cpd.kubectl("apply -f ${MANIFEST_FILE}")
					if (APPLY_STATUS > 0) {
						error("\u001B[31m Applyment is failed. Please check syntax of resource yaml, your permission or try to logout/login Jenkins to refresh token.\u001B[0m ")
					}
				}
			}
		}

		stage('Watch the status of the rollout') {
			when { expression { return env.DEPLOY_NAME } }
			steps {
				script {
					// Wait until deployment become ready
					def ROLLOUT_STATUS = cpd.kubectl("rollout status deployment ${DEPLOY_NAME}")
					if (ROLLOUT_STATUS > 0) {
						error("\u001B[31m Rollout deployment ${DEPLOY_NAME} is failed.\nref \u001B[0m https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application/ ")
						cpd.kubectl("get events | grep ${DEPLOY_NAME}")
					}
				}
			}
			post {
				aborted {
					script {
						echo "\u001B[31m Rollout deployment ${DEPLOY_NAME} is timeout.\nref \u001B[0m https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application/ "
						cpd.kubectl("get events | grep ${DEPLOY_NAME}")
					}
				}
			}
		}

		stage('End to end test') {
			steps {
				script {
					// Do test
					echo 'xxx'
				}
			}
			post {
				failure {
					script {
						cpd.kubectl("rollout undo deploy ${DEPLOY_NAME}")
					}
				}
			}
		}
	}

	post {
		always {
			// Clean up workspace to avoid mixing with the results of previous builds
			// If you want to debug, comment out following line please
			cleanWs()
		}
	}
}
